Some more Threejs/WebGL/CG tips (I often tell them to my students):

1. Learn Mathematics (at least geometry, matrix & vectors manipulation, numerical analysis)

 2. In many cases it is OK to replace the physically correct animation with visually acceptable animation. For example, vertical motion of a bouncing ball could use |sin(t)| instead of gt^2/2+vt+c .... this will make shorter code, it will be easier to define bouncing frequency and amplitude ... and no one will understand the motion is incorrect.

 3. when making complex motion ... split it into several simple motions.

 4. when making a heavy animation, add a flag that will turn on/off visual effects (textures, shadows, hipoly). This saves time when you want to work on the motion and you do not need pretty visual effects.

 5. if you have control on vsync, turn it on for smoother animation; or turn it off for faster performance

 6. curves look good at G1/C1; surfaces usually need G2/C2 (especially reflective ones)

7. Sometimes the behaviour of Three.js is unexpected -- this is because WebGL is most likely translated into OpenGL or Direct3D (Angle). For example, lines with widths>1.
lines with width>1 may be shown as width==1

 8. generally (but not always) it is good to move calculations from the CPU to the GPU. i.e. it is often better to put the calculations in the shader, insted to do them in JS

 9. always try your program on different devices (if available). in the worst case, try them at various screen sizes and proportions -- make sure that none of the important part of the scene is left offscreen.

 10. running at full screen is often smoother that running in maximized screen.

11. always be ready to react well on lost context

 12. when loading textures and other resources from other domains (or from local file system), beware of CORS

 13. in animation, make the loop as fast at it is reasonably possible

 14. when defining frustums, make near and far planes closer (this is increase the "precision" of depth buffer)

15. in case of z-fighting, try polygon offset; or add a small offset of coordinates

16. when managing rotations via euler angles, beware of the gimbel lock

 17. many calculations become simpler if vectors have unit length

 18. if you look at a dark scene with dark objects ... on a smartphone under a direct sublight, most likly nothing will be seen. (so, consider the environment of your users)

 19. on mobile platform pixelratio might be different from 1

 20. it is better to provide some option for mobile users to use a lighter version of your graphic application (heavy graphics usually drain the battery pretty fast)